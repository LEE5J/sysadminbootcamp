1주차 세션 후기
시스템 어드민 이라는 것에대해서 배우고 내가 가려는 방향이 맞는지
개발도 재미있고 그것을 실제로 작동하는 HW적인 부분에도 관심이 있다.
데브옵스를 이야기 하는것이 아님
"개발 이외의 부분 -> 배포나 세팅을 제로부터"
내가 지금 공부하려고 관심가지는 부분이다.
HW부분 + SW 부분인데
많이 가봤자 OS 깔고 SSH 포트 설정하는 정도
보안부분은 포함이 된다고 생각했지만 보안은 별도의 부서를 둬서 진행한다는 것이 의외였다.
왜냐하면 고양이에게 생선을 주지 않는 다고 표현을 하시는데
모든 것을 맡길 수는 없다는 것이었다.
특징적으로는 연봉이 좋지않다. 저임금이고 호출이 발생했을때 무조건 일찍와야하며 주말이나 연휴가 없다.
사실 이게 나한테는 전자는 중요하고 후자는 중요하지 않다. 
대표적으로 아마존의 연봉(초봉 10만불)을 생각했을때 어느정도 만족할만한 연봉을 제시한다고 생각한다.
이것은 최상의 시나리오이고 실질적으로 그렇지 않다라고 했을때 어디까지 타협할 수 있을지가?
엔지니어는 개발자에 비해서 10퍼센트 정도 적게 받는 경향이 있다.(본인피셜)
국내외 해외의 연봉차이는 1.7배 정도 차이난다고 생각됨
나는 운영과 구축에 주로 생각했었는데 문제 해결과정도 중요했다.
특히 technical support engineer 근무한다면 엔지니어의 성격보다는 영업의 성격이 더 강해 보인다.
전망에 대해서 질문을 몇가지 했는데
도커기반으로 갈것 같다. VM을 사용해서 전가상화를 하지 않을거 같다.
x86에서 arm으로 시장파이는 나뉠것이지만 파워pc 처럼 온전히 바뀌지는 않을 것이다.
i think
상위 두가지모두 퍼포먼스 또는 코스트 문제라고 생각한다.
arm이 가지는 이점은 전력효율이다. 유지비용이 굉장히 저렴하다는 것을 의미한다.
명령어 셋이 다르다는게 과연 유의미한 코스트일까? 시간이 지나면 해결될 코스트이기에 그렇다면 x86의 존재의미는 어디에있을까?
두번째로 도커기반으로 갈것이라고 생각이 되기도 하지만 "그림과 실습으로 배우는 도커앤 쿠버네티스"를 보았을때 Single point of failure
이부분에서 VM이 좀 더 이점이 있지않나라는 생각이 들수도 있다.
나는 리눅스 커널을 까본 것도 아니고 정확하지는 않지만 커널을 공유하는 것이 지니는 리스크는 유의미하지않다고 생각됨
보안적으로 볼때 뚫리는 원인은 대다수가 사용자 잘못에 기인하고 HW적 취약점은 공통으로 적용받는다.
redhat을 믿습니다.


1주차 과제: 100대의 VM을 설치하고 관리하려고 하면 수작업으로 하는것은 비효율적이다. 어떻게 해야할까?
System Admin은 상황에 따라 몇십, 몇백대의 서버를 운영하게 됩니다.
만약 모든 서버의 특정 Kernel Parameter를 변경해야 한다면, 몇십, 몇백대의 서버에 하나 하나 로그인하여 작업을 수행해야 할까요?
아마 매우 비효율적일겁니다.
SSH를 통하여 다수의 서버에 동시에 접속하여 명령어를 한번에 전달 할 수 있다면, 작업은 훨씬 쉬워지겠죠?
(SecureCRT / xshell / mobaxterm 등의 터미널 프로그램을 사용합니다)
이 과정에서 Linux 관리자들이 GUI보다 CLI를 선호하는 이유도 알수 있습니다.
(GUI의 경우는 마우스로 동시에 명령을 내리기가 어렵습니다 / Windows를 상상해 보세요)
두번째, 가상화 환경이라면 말씀하신대로 Clone 기능을 활용 할 수 있습니다.
물리 환경이라면 Disk Mirroring을 활용하기도 하구요.
리눅스의 킥스타트 & PXE Boot을 활용하여 효율적으로 설치 할 수 있습니다.
(네트워크 원격으로 OS를 설치하는 방법입니다)


2주차 과제:OS자체 보안기능을 사용하지 않는 이유
OS의 자체 보안 기능을 사용하지 않는 이유는, 고양이에게 생선을 맡길 수가 없기 때문입니다.
보안 수준을 올리게 되면 대부분 관련 담당자들은 불편해 집니다.
OS의 모든 권한을 가진 사람이 시스템의 보안 수준을 높이기 위해 스스로 불편해 지는 길을 갈까요?
때문에 어느 정도 규모가 있는 회사의 경우, 보안 관련 부서는 별도로 두게 됩니다.
OS 자체 보안 기능 보다는 3rd Party 보안 솔루션을 사용하는 경우가 많죠.


3주차 세션
1주차 세션부터 이 내용들을 적기 시작했더라면 좀 더 많은 내용을 적을 수 있었을 텐데 그러지 못한것이 아쉽다.
최대한 기억을 되살려내서 적어보려고 한다.
가장 인상적이었던것은 클라우드로 트렌드의 이관들
비즈니스가 고정적인 수요가 있는것은 아니다.
이점이 기업입장에서는 리스크로 다가오는 것이다.
잘되는 기업도 미래를 장담할 수는 없는 것이고 못나사는 기업도 생존여부도 모른다.
이럴때 클라우드가 굉장히 비용적으로 유연함을 보여주는 것이고 큰 메리트이다.
지금 자신이 하고 있는 일도 과연 지속될 수 있을까 하는 의문이 든다고 하신다.
결국에 비용적인 측면에서 어디까지 클라우드가 이점을 가지고 갈 수 있느냐인데
나는 클라우드 만능론에 동의하지 않는다.
사용자가 원하는 리소스가 다르며 이러한 모든 부분에서 클라우드가 대체될 수 있을까? 라는 의문이 든다.
가변적이지 않은 서비스들은 클라우드를 쓰는게 유의미하지 않다.
물론 가변적이지 않은 서비스는 없지만 동일한 사용량을 기준으로했을때 클라우드가 비싸다라는 점이 있다.
클라우드 비율을 줄이는 것은 유의미한 비용절감이기에 하이브리드 체제로 가지 않을까
시스템 어드민을 구성하고 팀을 유지하는 오버헤드 또한 있지만 어느정도 규모가 증가한다면 유의미하진 않을 것이라고 생각한다.
수업을 들으면서 계속 드는 생각이지만 System admin으로만 살기에는 힘들다.
기본적으로 보안쪽도 좀 해야하고 SW적으로도 할 줄 알아야한다고 느껴진다.
문제해결이나 성능이슈에 있어서도 모니터링툴로 한계가 있지않나? 제공되는 정보만으로 해결하기는 힘든 경우도 있다.
확장을 할때 SW 적으로 확장을 할 수도 있겠지만 HW적으로도 확장을 할 여지가 많다.
네트워크 엔지니어링이라던가 전선관리 등등이 있다.
규모가 커지면 분리가 될 수도 있지만 분야가 딱 잘리는 것은 아니라서 대비가 필요하다.
코치님 개인적인 취향으로 중국기업발 서버는 사용하지 않는다고 한다. 이마트랑 동네마트같은 기분이라고 하신다.
성능상의 차이나 안정성은 크게 차이나지 않는다고 한다. 하지만 신뢰성이 문제가 된다.
리눅스 모니터링 툴은 두가지가 크게 있는데 Prometheus Zabbix Nagios를 사용한다고 한다.
grafana를 통해서 시각화를 한다.
Comtainer 환경이나 쿠버네티스에서도 많이 사용한다고 한다.
    자신의 직무에대한 장단점과 전망들
이일을 하면서 힘든점은 일이 힘든적은 많지않다. 가장 힘든것은 사람이다.
첫 단추는 대기업이 좋다. 중소기업에서는 배운다기보다는 슈퍼맨이 되어야한다.
개인의 능력을 개인이 만들어야한다.
    개인적인 조언들
영어를 열심히하자. 구글도 영어로 검색하고 chatgpt도 영어로 작성해라
naver는 느리고 구글도 한글로 검색하면 트렌드에 느리다.
주요벤더사들의 세미나나 교육에 참석할 것 AWS MS NBP핸즈온 redhat등등 좋은것들이 많다.
    추천도서들
인프라-프로를 위한 리눅스 시스템 구축과 운용의 기술 + DevOps 와 SE를 위한 리눅스 커널 이야기(어려움)
OS-OS? Oh Yes! 누워서 보는 운영체제 이야기(쉬움) + 디버깅을 통해 배우는 리눅스 커널의 구조와 원리 (커널 레벨, 어려움)+공룡책
네트워크-후니의 쉽게 쓴 시스코 네트워킹 개정판 정리

4주차 과제를 하며 
prometheus와 그라파나를 통해서 모니터링을 세팅하는 것이 목표이다.
프로메테우스는 풀 방식으로 정보를 가져온다. 다른 모니터링 툴은 푸시방식으로 가져오는 것이 일반적이라고한다.
grafana를 주로 쓴다는데 왜일까? 대시보드를 만든다고 하는데 대체될 수 있는 방식인듯함
도커방식으로도 지원한다고 한다. 나중에 도커로 빌드업한다면 고려해봐야겠다.
솔찍히 도커방식에 대해서는 흐음....
실행방법은 prometheus -config.file="경로"
같은 폴더내라면 그냥 prometheus.yml 굳이 필요 없을거 같다라는 생각은 든다.
따로 지정이 없으면 9090포트로 할당함

5주차세션을 진행하면서
일단 이전에 스테이블 한 상태라면 클라우드가 항상 좋다라고 생각했는데 그건 아니었다
만약 글로벌한 진출을 고려한다면 이외의 국가에서는 클라우드로 진행해야한다. 그나라에 서버시설을 갖춘다는 것은 난이도 높다.
기술적인 부분을 과시하기 위해서라도 클라우드로 이관하는 경우가 많다.
부정적인부분은 비용적인면에서 저렴하진 않다. 서버를 새로 맞춘다면 감가상각되는것은 맞다.
사업시작시 서버구축비용이 들어간다는 점과 사업 철수시 처분을 해야하는 문제가 있다.
개인정보+금융 법으로 클라우드를 사용하지 못하는 제약조건도 있지만 해당되지는 않을듯하다.
추가로 단점은 클라우드가 안정성을 보장하지는 않는다는 점이었다.
쿠팡의 경우 AWS로 돌아가는데 AWS가 망가진다면 그 서버 사용시간분만큼만 보상을 한다.
하지만 쿠팡의 경우 그정도로는 있으나 마나한 보상이다. 더 큰 손실을 입기 때문이다.
비즈니스 레벨에서의 손실보전이 되지 않는다. 꽤나 치명적인 단점이기도 하다.
클라우드를 그렇다고 안쓰냐?는 것은 또한 아니다. 결국에는 클라우드 벤더사를 2중으로 걸쳐야 한다.

잘쓰면 비용을 많이 줄일 수 있다. 일반적으로 쓰는 것은 EC2이다. 이러한 것들은 OS를 제외하고는 모든 자율성이 보장된다.
만약 DB만 쓴다고 가정한다면 DB 제품군을 쓰는게 더 비용효율적인 측면이 있다.
같은 컴퓨팅 성능이라고 했을때 ec2가 두배정도의 비용을 요구하는 듯하다.

즉시성을 굉장히 좋은 포인트이다. 직접 서버를 구성한다면 사업결정이후에 문서기안,기안승인,구매과정에서 2-3주가 걸리고
계약을 하고 서버 입고하는데도 한달이상이 걸린다. 향온 항습 전력 상면 등등 전산실 HW 설치후에 SW도 설치해야하고
그뒤로 클라우드처럼 쓸 수 있다. 굉장히 길어진다. 서비스는 타이밍이 가장 중요하기 때문에 즉시성을 굉장한 큰 의미를 가진다.

클라우드 마이그레이션은 하지말자
단순히 fork & lift 로 하게된다. 하지만 이런식으로 한다면 성능이나 비용면에서 많이 비효율적이다.
이러한 것들을 고려해서 하려면 일부는 다시 개발해야하고 처음부터 클라우드를 상정하고 하는것이 좋다.
왜 그렇냐를 생각해보면 위에 EC2와 DB를 빌리는 비용에 대해서 다시 기억하자
직군별 느낀점도 같이 이야기 해주시는데 고민이 더 많아진다 ㅎㅎ









































